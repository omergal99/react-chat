{"version":3,"sources":["services/SocketService.js","store/ChatStore.js","store/AppStore.js","pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","user","size","arguments","length","undefined","text","possible","i","charAt","Math","floor","random","_randomName","on","txt","from","AppStore","chatStore","addMsg","SocketService","emit","ChatModule","rootStore","Object","classCallCheck","this","msgs","push","toConsumableArray","decorate","observable","sendMsg","action","getMsgs","computed","AppModule","ChatStore","HomePage","state","massage","massages","updateMsg","ev","_this","setState","target","value","preventDefault","msg","props","chat","map","idx","react_default","a","createElement","key","className","onChange","type","onClick","Component","observer","App","pages_HomePage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAMIA,QAASC,GAFb,IAIIC,EAuBJ,WAII,IAJ2B,IAAVC,EAAUC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EACpBG,EAAO,GACPC,EAAW,uDAENC,EAAI,EAAGA,EAAIN,EAAMM,IACtBF,GAAQC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASH,SAEhE,OAAOE,EA9BAO,GAIPd,EAAOe,GAAG,eAAgB,SAACC,EAAIC,GAE3BC,EAASC,UAAUC,OAAOJ,EAAKC,KAQvC,IAIeI,EAJF,SAACL,GACVhB,EAAOsB,KAAK,WAAYN,EAAKd,QCnB3BqB,aACF,SAAAA,EAAYC,GAAYC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACpBI,KAAKH,UAAYA,EACjBG,KAAKC,KAAO,CAAC,CAACZ,IAAI,QAAQC,KAAM,QAAQ,CAACD,IAAI,MAAMC,KAAM,6DAGrDD,GACJK,EAAmBL,kCAGhBA,EAAIC,GACPU,KAAKC,KAAKC,KAAM,CAAEb,MAAMC,yCAIxB,OAAOQ,OAAAK,EAAA,EAAAL,CAAIE,KAAKC,eAKxBG,YAASR,EACL,CACIK,KAAMI,IAENC,QAASC,IACTd,OAAQc,IAERC,QAASC,MAGFb,QCzBAL,EADE,IALb,SAAAmB,IAAeZ,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,GACXV,KAAKR,UAAY,IAAImB,EAAUX,uCCEjCY,6MACJC,MAAQ,CACNC,QAAS,GACTC,SAAU,MASZC,UAAY,SAACC,GACXC,EAAKC,SAAS,CAAEL,QAASG,EAAGG,OAAOC,WAIrCf,QAAU,SAACW,GAET,GADAA,EAAGK,iBACAJ,EAAKL,MAAMC,QAAQ,CAClB,IAAIS,EAAML,EAAKL,MAAMC,QAErBI,EAAKM,MAAMb,UAAUL,QAAQiB,GAC7BL,EAAKC,SAAS,CAAEL,QAAS,0FAf7Bd,KAAKmB,SAAS,CAAEJ,SAAUf,KAAKwB,MAAMb,UAAUH,2CAoB/C,IACMiB,EADUzB,KAAKwB,MAAMb,UAAUH,QACdkB,IAAI,SAACH,EAAKI,GAAN,OACvBC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAEDC,EAAAC,EAAAC,cAAA,SAAOE,UAAU,QAAQT,EAAIjC,KAA7B,SACAsC,EAAAC,EAAAC,cAAA,aAAQP,EAAIlC,QAIxB,OACEuC,EAAAC,EAAAC,cAAA,WAASE,UAAU,YAEjBJ,EAAAC,EAAAC,cAAA,6BAEAF,EAAAC,EAAAC,cAAA,QAAME,UAAU,YACdJ,EAAAC,EAAAC,cAAA,SAAOT,MAAOrB,KAAKa,MAAMC,QAASmB,SAAUjC,KAAKgB,UAAWkB,KAAK,SACjEN,EAAAC,EAAAC,cAAA,UAAQK,QAASnC,KAAKM,SAAtB,SAGFsB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAYP,WA/CXW,aAsDRC,cAASzB,GC9CT0B,MARf,WACE,OACEV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAACS,EAAD,CAAU5B,UAAWpB,EAASC,cCGlBgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.624f565f.chunk.js","sourcesContent":["import io from 'socket.io-client'\r\nimport AppStore from '../store/AppStore';\r\n\r\nconst serverUrl = process.env.NODE_ENV !== 'development'?\r\n'' : '//localhost:9090';\r\n\r\nvar socket = io(serverUrl);\r\n// const msgs = [{txt:'hello',from: 'Omer'},{txt:'hii',from: 'Amit'}];\r\nvar user = _randomName();\r\n\r\nconnectSocket();\r\nfunction connectSocket() {\r\n    socket.on('chat new msg', (txt,from) => {\r\n        // msgs.push( { txt , from } );\r\n        AppStore.chatStore.addMsg(txt, from)\r\n    });\r\n}\r\n\r\n// const getMsgs = () => {\r\n//     return msgs;\r\n// }\r\n\r\nconst send = (txt) => {\r\n    socket.emit('msg sent', txt, user);\r\n}\r\n\r\nexport default {\r\n    send,\r\n    // getMsgs\r\n}\r\n\r\nfunction _randomName(size = 6) {\r\n    var text = \"\";\r\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n\r\n    for (var i = 0; i < size; i++)\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\r\n    return text;\r\n}","import { decorate, observable, computed, action } from 'mobx';\r\n\r\nimport SocketService from '../services/SocketService';\r\n\r\nclass ChatModule {\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.msgs = [{txt:'hello',from: 'Omer'},{txt:'hii',from: 'Amit'}];\r\n    }\r\n\r\n    sendMsg(txt) {\r\n        SocketService.send(txt)\r\n    }\r\n\r\n    addMsg(txt,from) {\r\n        this.msgs.push( { txt , from } )\r\n    }\r\n\r\n    get getMsgs() {\r\n        return [...this.msgs];\r\n    }\r\n\r\n}\r\n\r\ndecorate(ChatModule,\r\n    {\r\n        msgs: observable,\r\n\r\n        sendMsg: action,\r\n        addMsg: action,\r\n\r\n        getMsgs: computed\r\n    })\r\n\r\nexport default ChatModule;","import ChatStore from './ChatStore';\r\n\r\nclass AppModule {\r\n    constructor() {\r\n        this.chatStore = new ChatStore(this)\r\n    }\r\n}\r\n\r\nconst AppStore = new AppModule()\r\nexport default AppStore;\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\n// import SocketService from '../services/SocketService';\r\n\r\n\r\nclass HomePage extends Component {\r\n  state = {\r\n    massage: '',\r\n    massages: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.setState({ massages: SocketService.getMsgs() });\r\n    this.setState({ massages: this.props.ChatStore.getMsgs });\r\n  }\r\n  \r\n\r\n  updateMsg = (ev) => {\r\n    this.setState({ massage: ev.target.value });\r\n    // this.setState({ massages: this.props.ChatStore.getMsgs });\r\n  }\r\n\r\n  sendMsg = (ev) => {\r\n    ev.preventDefault();\r\n    if(this.state.massage){\r\n        var msg = this.state.massage;\r\n        // SocketService.send(msg);\r\n        this.props.ChatStore.sendMsg(msg);\r\n        this.setState({ massage: '' });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var massages2 = this.props.ChatStore.getMsgs;\r\n    const chat = massages2.map((msg, idx) => (\r\n        <li key={idx}>\r\n            {/* <div> */}\r\n                <label className=\"user\">{msg.from}:&nbsp;</label>\r\n                <label>{msg.txt}</label>\r\n            {/* </div> */}\r\n        </li>\r\n    ));\r\n    return (\r\n      <section className=\"homePage\">\r\n\r\n        <h1>Welcome to Chat</h1>\r\n\r\n        <form className=\"msg-form\">\r\n          <input value={this.state.massage} onChange={this.updateMsg} type=\"text\" />\r\n          <button onClick={this.sendMsg}>SEND</button>\r\n        </form>\r\n\r\n        <ul className=\"msg-list\">{chat}</ul>\r\n\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(HomePage);","import React from 'react';\nimport './assets/css/App.scss';\nimport AppStore from './store/AppStore';\n\nimport HomePage from './pages/HomePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HomePage ChatStore={AppStore.chatStore}/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}